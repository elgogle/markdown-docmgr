@using MarkdownRepository.Models
@{
    ViewBag.Title = "写文章";
    Layout = "~/Views/Shared/_BookLayout.cshtml";
}
@model MarkdownRepository.Models.Document
@{
    var doc = Model ?? new MarkdownRepository.Models.Document() ;
    var uploadId = Guid.NewGuid().ToString();
}

<div id="message" class=""></div>

<input id="docId" type="hidden" value="@doc.rowid" />

<label style="">标题
    <input id="title" class="form-control col-sm-4" type="text" value="@doc.title" class="" />
</label>

<label style="">文章分类
    <input id="category" class="form-control col-sm-4" placeholder="使用','分隔" type="text" value="@doc.category" class=""
        list="categories" />
</label>

<datalist id="categories">
    @if(ViewBag.Categories != null) {
    foreach (var c in ViewBag.Categories)
    {
    <option value="@c" />
    }
    }
</datalist>

<label style="">是否公开
    <input id="access" type="checkbox" @(doc.is_public==DocumentAccess.PUBLIC?"checked":"") />
</label>

<button id="btnView" class="btn btn-default pull-right">
    <span class="glyphicon glyphicon-blackboard"
          aria-hidden="true"></span> 查看
</button>
<button id="btnSave" class="btn btn-default pull-right">
    <span class="glyphicon glyphicon-floppy-save"
        aria-hidden="true"></span> 保存
</button>

<div id="mkEditor">
    <textarea style="display:none;">@doc.content</textarea>
</div>

@section style{

@System.Web.Optimization.Styles.Render("~/css/editor.md")

<style>
    #content{
        padding: 15px;
    }
</style>
}

@section scripts{

@System.Web.Optimization.Scripts.Render("~/script/editor.md")

<script>
    function resizeLayout() {
        window.editor.height(window.visualViewport.height - 145);
    }

    window.onresize = function () {
        resizeLayout();
    }

    $(function () {
        window.editor = editormd("mkEditor", {
            width: "100%",
            height: 640,
            saveHTMLToTextarea: true,
            autoLoadModules: false,
            imageUpload: true,
            imageFormats: ["jpg", "jpeg", "gif", "png", "bmp", "webp"],
            imageUploadURL: '@Url.Action("UploadImage", "Document", new { uploadId = uploadId })',
            pluginPath: '@Url.Content("~/editor.md/plugins/")',
            tex: true,
            flowChart : true,
            sequenceDiagram : true,
            taskList: true,
            syncScrolling : true,
            toolbarIcons : function() {
                return ['undo', 'redo', '|',
                    'bold', 'del', 'italic', 'quote', 'ucwords', 'uppercase', 'lowercase', '|',
                    'h1', 'h2', 'h3', 'h4', 'h5', 'h6', '|',
                    'list-ul', 'list-ol', 'hr', 'table', 'pasteTable', '|',
                    'link', 'reference-link', 'image', 'code', 'preformatted-text', 'code-block', 'datetime', 'emoji', 'html-entities', 'pagebreak', '|',
                    'goto-line', 'watch', 'preview', 'fullscreen', 'clear', 'search', '|'
                    ];
            },
            toolbarIconsClass : {
                pasteTable : "fa-clipboard"
            },
            toolbarIconTexts : {
                pasteTable : "粘贴表格"
            },
            lang : {
                toolbar : {
                    pasteTable : "粘贴表格"
                }
            },
            toolbarHandlers : {
                /**
                * @@param {Object}      cm         CodeMirror对象
                * @@param {Object}      icon       图标按钮jQuery元素对象
                * @@param {Object}      cursor     CodeMirror的光标对象，可获取光标所在行和位置
                * @@param {String}      selection  编辑器选中的文本
                */
                pasteTable: function(cm, icon, cursor, selection) {
                    navigator.clipboard.readText().then(function(copiedText){
                        var text = copiedText;
                        var tab = '\t';
                        var line = '\r\n';
                        var delimeter = '|';

                        var preLineTabs = 0;
                        var totalRows = 0;
                        var isTable = true;
                        var tableContent = '|';
                        var nextIsNewLine = false;

                        if (text) {
                            var a = text.split(line);
                            for (var i = 0; i < a.length; i++) {
                                var s = a[i];
                                if (i == (a.length - 1) && !s) continue;

                                if (nextIsNewLine) {
                                    tableContent += delimeter;
                                    nextIsNewLine = false;
                                }

                                if (s.indexOf(tab) > -1) {
                                    // 包含有制表
                                    totalRows++;
                                    var t = s.split(tab);
                                    var thisLineTabs = 0;
                                    for (var j = 0; j < t.length; j++) {
                                        tableContent += (t[j]?t[j]:'&nbsp;') + delimeter;
                                        thisLineTabs++;
                                    }
                                    tableContent += line; //新起一行开始
                                    nextIsNewLine = true;

                                    if (totalRows > 1 && thisLineTabs !== preLineTabs) {
                                        isTable = false;
                                        break;
                                    }

                                    preLineTabs = thisLineTabs;
                                } else {
                                    tableContent += (s?s:'-') + '<br/>';
                                }
                            }
                        }

                        if (totalRows > 1 && isTable) {
                            var tabTitleRow = delimeter;
                            for (var i = 0; i < preLineTabs; i++) {
                                tabTitleRow += '  ' + i + '  ' + delimeter;
                            }
                            tabTitleRow += line + delimeter;
                            for (var i = 0; i < preLineTabs; i++) {
                                tabTitleRow += '-----' + delimeter;
                            }

                            tabTitleRow += line;

                            editor.insertValue(tabTitleRow + tableContent);
                            ev.preventDefault();
                        }
                    });
                }
            }
        });


        $("#mkEditor").on('paste', function (ev) {
            var data = event.clipboardData;
            var items = (event.clipboardData || event.originalEvent.clipboardData).items;

            for (var index in items) {
                var item = items[index];
                if (item.kind === 'file') {
                    var blob = item.getAsFile();
                    var reader = new FileReader();
                    reader.onload = function (event) {
                        var base64 = event.target.result;

                        //ajax上传图片
                        $.post('@Url.Action("UploadImageByBase64", "Document")', {
                            base64Content: base64,
                            uploadId: '@uploadId'
                        }, function (ret) {
                            if (ret.success === 1) {
                                //新一行的图片显示
                                editor.insertValue("\n![](" + ret.url + ")");
                            } else {
                                console.log(ret.message);
                            }
                        });
                    }

                    reader.readAsDataURL(blob);
                }
            }
        });

        function saveDocument(callback) {
            $.post(
                '@Url.Action("Create", "Document")',
                {
                    content: $("#mkEditor > textarea").val(),
                    title: $("#title").val(),
                    category: $("#category").val(),
                    id: $("#docId").val(),
                    access: $("#access")[0].checked === true ? 1 : 0,
                    uploadId: '@uploadId'
                },
               function (result) {
                   if (callback && typeof callback === 'function') {
                       callback(result);
                   }
               }
            );
        }

        $("#btnSave").on('click', function () {
            saveDocument(function (result) {
                $("#docId").val(result.rowid);
                var msg =
                    "<div id='test' style='padding:0.2em; border-radius:1.5em;color:#fff;font-size:3em;z-index:999;position:absolute;top:50%;left:50%;opacity:0.8; background-color:#000'></div>",
                    $msg = $(msg);
                $msg.text("已保存")
                $("body").append($msg);
                $msg.animate({
                    top: 0,
                    left: 0,
                    fontSize: 0,
                    opacity: 0
                }, 2000, function () {
                    $(this).remove();
                })
            });
        });

        $("#btnView").on('click', function () {
            saveDocument(function (result) {
                document.location = '@Url.Action("Show", "Document")' + '?id=' + result.rowid;
            });
        });

        $(document).on('keydown', function (e) {
            var ctrlKey = e.ctrlKey || e.metaKey;
            if (ctrlKey) {
                var keyCode = e.keyCode || e.which || e.charCode;
                // ctrl+s
                if (ctrlKey && keyCode == 83) {
                    $('#btnSave').trigger('click');
                    e.preventDefault();
                    return false;
                }
            }
        });

        resizeLayout();
    });
</script>
}